// email.service.ts - Versi√≥n CDN actualizada
import { Injectable } from '@angular/core';
import { CartItem } from './cart.service';

// ‚úÖ Declarar emailjs como variable global
declare var emailjs: any;

@Injectable({
  providedIn: 'root'
})
export class EmailService {

  // ‚úÖ CONFIGURACI√ìN CON TUS DATOS REALES
  private readonly SERVICE_ID = 'service_qv9d88e';
  private readonly TEMPLATE_ID = 'template_w6435yp';

  constructor() {
    console.log('üìß EmailJS cargado desde CDN para Parky Films');
  }

  // ‚úÖ ENVIAR EMAIL CON ENTRADAS Y PRODUCTOS DEL BAR
  async sendTicketEmail(orderData: any, cartItems: CartItem[]): Promise<boolean> {
    try {
      console.log('üìß Enviando email real con EmailJS CDN...');
      
      // Verificar que emailjs est√© disponible
      if (typeof emailjs === 'undefined') {
        throw new Error('EmailJS no est√° cargado desde el CDN');
      }

      // Separar items por tipo
      const peliculaItems = cartItems.filter(item => item.tipo === 'pelicula');
      const barItems = cartItems.filter(item => item.tipo === 'bar');
      
      // Preparar datos para el template
      const templateParams = {
        to_email: orderData.email,
        to_name: orderData.nombre,
        order_id: orderData.orderId,
        total_amount: orderData.total,
        purchase_date: new Date().toLocaleDateString('es-ES'),
        payment_method: orderData.metodoPago,
        
        // Informaci√≥n detallada de las pel√≠culas
        movies_details: peliculaItems.length > 0 ? this.formatMoviesForEmail(peliculaItems) : 'No se compraron entradas',
        
        // Informaci√≥n detallada de productos del bar
        bar_details: barItems.length > 0 ? this.formatBarItemsForEmail(barItems) : 'No se compraron productos del bar',
        
        // Desglose de precios
        subtotal: orderData.subtotal,
        service_fee: orderData.serviceFee,
        taxes: orderData.taxes,
        
        // Info adicional
        phone: orderData.telefono || 'No proporcionado',
        
        // Resumen de compra
        has_movies: peliculaItems.length > 0,
        has_bar_items: barItems.length > 0,
        total_tickets: peliculaItems.reduce((sum, item) => sum + item.cantidad, 0),
        total_bar_items: barItems.reduce((sum, item) => sum + item.cantidad, 0)
      };

      console.log('üìã Datos a enviar:', templateParams);

      const result = await emailjs.send(
        this.SERVICE_ID,
        this.TEMPLATE_ID,
        templateParams
      );

      console.log('‚úÖ Email enviado exitosamente:', result);
      return true;

    } catch (error) {
      console.error('‚ùå Error enviando email:', error);
      return false;
    }
  }

  // ‚úÖ FORMATEAR INFORMACI√ìN DE PEL√çCULAS PARA EMAIL
  private formatMoviesForEmail(cartItems: CartItem[]): string {
    return cartItems
      .filter(item => item.tipo === 'pelicula' && item.pelicula && item.funcion)
      .map((item, index) => `
üé¨ ENTRADA ${index + 1}:
   ‚Ä¢ Pel√≠cula: ${item.pelicula!.titulo}
   ‚Ä¢ G√©nero: ${item.pelicula!.genero}
   ‚Ä¢ Sala: ${item.funcion!.sala}
   ‚Ä¢ Fecha: ${item.funcion!.fecha}
   ‚Ä¢ Hora: ${item.funcion!.hora}
   ‚Ä¢ Formato: ${item.funcion!.formato}
   ‚Ä¢ Asientos: ${item.cantidad}
   ‚Ä¢ Precio: $${item.subtotal.toFixed(2)}
   ${item.precio > item.funcion!.precio ? 'üëë ASIENTOS VIP' : 'ü™ë ASIENTOS EST√ÅNDAR'}
`).join('\n');
  }

  // üçø NUEVO: FORMATEAR INFORMACI√ìN DE PRODUCTOS DEL BAR PARA EMAIL
  private formatBarItemsForEmail(cartItems: CartItem[]): string {
    return cartItems
      .filter(item => item.tipo === 'bar' && item.barProduct)
      .map((item, index) => {
        let details = `
üçø PRODUCTO ${index + 1}:
   ‚Ä¢ Producto: ${item.nombre || item.barProduct!.nombre}
   ‚Ä¢ Categor√≠a: ${item.barProduct!.categoria}
   ‚Ä¢ Cantidad: ${item.cantidad}
   ‚Ä¢ Precio unitario: $${item.precio.toFixed(2)}
   ‚Ä¢ Subtotal: $${item.subtotal.toFixed(2)}`;

        // Agregar informaci√≥n de opciones si las hay
        if (item.barOptions) {
          if (item.barOptions.tamano) {
            details += `\n   ‚Ä¢ Tama√±o: ${item.barOptions.tamano.nombre}`;
          }
          
          if (item.barOptions.extras && item.barOptions.extras.length > 0) {
            const extras = item.barOptions.extras.map(extra => extra.nombre).join(', ');
            details += `\n   ‚Ä¢ Extras: ${extras}`;
          }
          
          if (item.barOptions.notas && item.barOptions.notas.trim()) {
            details += `\n   ‚Ä¢ Notas: ${item.barOptions.notas}`;
          }
        }

        if (item.barProduct!.es_combo) {
          details += '\n   üéÅ COMBO ESPECIAL';
        }

        return details;
      }).join('\n');
  }

  // ‚úÖ VALIDAR CONFIGURACI√ìN
  isConfigured(): boolean {
    return typeof emailjs !== 'undefined';
  }

  // ‚úÖ TEST EMAIL ACTUALIZADO (para probar con ambos tipos de productos)
  async sendTestEmail(testEmail: string): Promise<boolean> {
    try {
      if (typeof emailjs === 'undefined') {
        throw new Error('EmailJS no est√° disponible');
      }

      const testParams = {
        to_email: testEmail,
        to_name: 'Usuario de Prueba',
        order_id: 'TEST-001',
        total_amount: '35.50',
        purchase_date: new Date().toLocaleDateString('es-ES'),
        payment_method: 'Tarjeta de Cr√©dito',
        
        movies_details: `
üé¨ ENTRADA 1:
   ‚Ä¢ Pel√≠cula: Avatar: El Camino del Agua
   ‚Ä¢ G√©nero: Aventura
   ‚Ä¢ Sala: Sala 1 - IMAX
   ‚Ä¢ Fecha: 2024-12-20
   ‚Ä¢ Hora: 14:30
   ‚Ä¢ Formato: IMAX 3D
   ‚Ä¢ Asientos: 2
   ‚Ä¢ Precio: $25.00
   ü™ë ASIENTOS EST√ÅNDAR`,
   
        bar_details: `
üçø PRODUCTO 1:
   ‚Ä¢ Producto: Combo Cl√°sico
   ‚Ä¢ Categor√≠a: Combos
   ‚Ä¢ Cantidad: 1
   ‚Ä¢ Precio unitario: $12.00
   ‚Ä¢ Subtotal: $12.00
   ‚Ä¢ Tama√±o: Mediano
   üéÅ COMBO ESPECIAL`,
   
        subtotal: '30.00',
        service_fee: '1.50',
        taxes: '2.40',
        phone: '+1 234 567 8900',
        has_movies: true,
        has_bar_items: true,
        total_tickets: 2,
        total_bar_items: 1
      };

      const result = await emailjs.send(
        this.SERVICE_ID,
        this.TEMPLATE_ID,
        testParams
      );

      console.log('‚úÖ Email de prueba enviado:', result);
      return true;
    } catch (error) {
      console.error('‚ùå Error en email de prueba:', error);
      return false;
    }
  }

  // üÜï NUEVO: Obtener resumen de compra para mostrar en la app
  getOrderSummary(cartItems: CartItem[]): {
    peliculas: any[],
    productosBar: any[],
    totalEntradas: number,
    totalProductosBar: number,
    tieneAmbos: boolean
  } {
    const peliculaItems = cartItems.filter(item => item.tipo === 'pelicula');
    const barItems = cartItems.filter(item => item.tipo === 'bar');
    
    return {
      peliculas: peliculaItems.map(item => ({
        titulo: item.pelicula?.titulo || 'Pel√≠cula desconocida',
        cantidad: item.cantidad,
        precio: item.subtotal
      })),
      productosBar: barItems.map(item => ({
        nombre: item.nombre || item.barProduct?.nombre || 'Producto desconocido',
        cantidad: item.cantidad,
        precio: item.subtotal
      })),
      totalEntradas: peliculaItems.reduce((sum, item) => sum + item.cantidad, 0),
      totalProductosBar: barItems.reduce((sum, item) => sum + item.cantidad, 0),
      tieneAmbos: peliculaItems.length > 0 && barItems.length > 0
    };
  }
}